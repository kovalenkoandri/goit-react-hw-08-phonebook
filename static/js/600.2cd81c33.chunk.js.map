{"version":3,"file":"static/js/600.2cd81c33.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/pages/Tasks.module.css?32b6","webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","redux/selectors.js","components/ContactList/ContactList.jsx","webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","pages/Tasks.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"title\":\"Tasks_title__shWup\"};","// extracted by mini-css-extract-plugin\nexport default {\"renderLi\":\"ContactList_renderLi__lR2FQ\",\"renderBtn\":\"ContactList_renderBtn__URNMf\"};","export const selectItems = state => state.contactsSlice.contacts.items;\nexport const selectFilter = state => state.filterSlice.filter;\nexport const selectLoading = state => state.contactsSlice.contacts.isLoading;\nexport const selectError = state => state.contactsSlice.contacts.error;\n","import css from './ContactList.module.css';\nimport { deleteContact } from 'redux/operations';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  selectItems,\n  selectFilter,\n} from 'redux/selectors';\nconst ContactList = () => {\n  const dispatch = useDispatch();\n  const items = useSelector(selectItems);\n  const filter = useSelector(selectFilter);\n  const renderContacts = () => {\n    return items.filter(el => el.name.includes(filter));\n  };\n  return (\n    <ul>\n      {renderContacts().map(element => {\n        const { id, name, phone } = element;\n        return (\n          <li key={id} className={css.renderLi}>\n            {`${name}: ${phone} `}\n            <button\n              type=\"button\"\n              className={css.renderBtn}\n              onClick={() => dispatch(deleteContact(id))}\n            >\n              Delete\n            </button>\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\n\nexport default ContactList;\n","// extracted by mini-css-extract-plugin\nexport default {\"phonebookForm\":\"ContactForm_phonebookForm__KwlhY\",\"inputName\":\"ContactForm_inputName__a8jFO\"};","import css from './ContactForm.module.css';\nimport { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectItems } from 'redux/selectors';\nimport { addContact } from 'redux/operations';\nconst ContactForm = () => {\n  const [name, setName] = useState('');\n  const [phone, setPhone] = useState('');\n  const handleChangeName = event => setName(event.target.value);\n  const handleChangePhone = event => setPhone(event.target.value);\n  const dispatch = useDispatch();\n  const items = useSelector(selectItems);\n  const handleSubmit = (name, phone, event) => {\n    event.preventDefault(); // except refresh page onSubmit\n    const form = event.target;\n    if (\n      items.some(el =>\n        el.name.toLocaleUpperCase().includes(name.toLocaleUpperCase())\n      )\n    ) {\n      alert(`${name} is already in contacts.`);\n      return;\n    }\n    dispatch(addContact({ name, phone }));\n    form.reset();\n  };\n  return (\n    <form\n      className={css.phonebookForm}\n      onSubmit={event => handleSubmit(name, phone, event)}\n      autoComplete=\"off\"\n    >\n      <label htmlFor=\"name\">Name</label>\n      <input\n        type=\"text\"\n        name=\"name\"\n        id=\"name\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n        className={css.inputName}\n        onChange={handleChangeName}\n        // value={name}\n        //remove value attributes, the reset will set all the values to blank\n      />\n      <label htmlFor=\"number\">Number</label>\n      <input\n        type=\"tel\"\n        name=\"number\"\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        required\n        className={css.inputName}\n        onChange={handleChangePhone}\n        // value={number}\n        // if uncomment from.reset() doesn't work at App.jsx\n      />\n      <button type=\"submit\">Add contact</button>\n    </form>\n  );\n};\n\nexport default ContactForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"inputName\":\"Filter_inputName__snXo9\"};","import css from './Filter.module.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { filterTask } from 'redux/filterSlice';\nimport { selectFilter } from 'redux/selectors';\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n  return (\n    <>\n      <label htmlFor=\"filter\">Find contacts by name</label>\n      <input\n        type=\"text\"\n        name=\"filter\"\n        className={css.inputName}\n        onChange={event => dispatch(filterTask(event.target.value))}\n        value={filter}\n      />\n    </>\n  );\n};\n\nexport default Filter;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet } from 'react-helmet';\n// import { TaskList } from 'components/TaskList/TaskList';\n// import { TaskEditor } from 'components/TaskEditor/TaskEditor';\n// import { fetchTasks } from 'redux/tasks/operations';\n// import { selectLoading } from 'redux/tasks/selectors';\nimport css from './Tasks.module.css';\nimport ContactList from 'components/ContactList';\nimport ContactForm from 'components/ContactForm';\nimport Filter from 'components/Filter';\nimport { fetchTasks } from 'redux/operations';\nimport { selectLoading, selectError, selectItems } from 'redux/selectors';\nexport default function Tasks() {\n  const dispatch = useDispatch();\n  console.log(useSelector(selectItems));\n  const items = useSelector(selectItems);\n  const isLoading = useSelector(selectLoading);\n  const error = useSelector(selectError);\n  useEffect(() => {\n    dispatch(fetchTasks());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Your tasks</title>\n      </Helmet>\n      {/* <TaskEditor /> */}\n      {/* <div>{isLoading && 'Request in progress...'}</div> */}\n      {/* <TaskList /> */}\n      <h1 className={css.title}>Phonebook</h1>\n      <ContactForm />\n      <h2 className={css.title}>Contacts</h2>\n      <Filter />\n      <ContactList />\n      {isLoading && <b>Loading tasks...</b>}\n      {error && <b>{error}</b>}\n      <p>{items.length > 0 && JSON.stringify(items)}</p>\n    </>\n  );\n}\n"],"names":["selectItems","state","contactsSlice","contacts","items","selectFilter","filterSlice","filter","selectLoading","isLoading","selectError","error","dispatch","useDispatch","useSelector","el","name","includes","map","element","id","phone","className","css","type","onClick","deleteContact","useState","setName","setPhone","onSubmit","event","preventDefault","form","target","some","toLocaleUpperCase","alert","addContact","reset","handleSubmit","autoComplete","htmlFor","pattern","title","required","onChange","value","filterTask","Tasks","console","log","useEffect","fetchTasks","Helmet","length","JSON","stringify"],"sourceRoot":""}